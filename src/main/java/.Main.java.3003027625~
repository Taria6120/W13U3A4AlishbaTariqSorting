import java.util.Arrays;
import java.util.Random;


public class Main {
  public static void main(String[] args) {
    

    int [] list = new Random().ints (10,-1000,1001).toArray();
    System.out.println(("Original unsorted list; ")Arrays.toString(list));
    String[] options = {"selection","bubble", "insertion", "quick"};
    for (String option : options){
      sortAndPrint(options, Arrays.copyOf(list, list.length));
    }
            
    }
  public static void sortAndPrint(String[] options, int[] list){
    Counter counter = new Counter();
    long starttime = System.currentTimeMillis();

    switch (options){
      case "selection":
        selectionSort(list, counter);
        break;
      case "bubble":
        bubbleSort(list, counter);
        break;
      case "insertion":
        insertionSort(list, counter);
        break;
      case "quick":
        quickSort(list, 0, list.length - 1, counter);
        break;
        
    }

    long endtime = System.currentTimeMillis();
    double elapsedtime = endtime - starttime;


    System.out.println((options) + " Sort:");
    
    System.out.println(String.format("%s sort took %d milliseconds", options, elapsedtime));
    System.out.println("Sorted list: " + Arrays.toString(list));
    System.out.println("Loop executions: " + counter.loopCount);
    System.out.println("Comparisions:" + counter.compareCount);
    System.out.println ("Movement" + counter.movementCount);
    System.out.println("Time taken:" + timeTaken + "ms");
    System.out.println();
  }
  static class {
    int loopCount = 0;
    int compareCount = 0;
    int moventCount = 0;

  }

  }
                          
    }
  }
    
    
    switch (options) {
      case selection:
        if (countOperand == 1)
          answer = num1;
        else
          answer += num1;
        // if user choose +, the program will add the number
        break;
      case bubble:
        if (countOperand == 1)
          answer = num1;
        else
          answer -= num1;
        // if user choose -, the program will subtract the number
        break;
        case insertion:
        if (countOperand == 1)
          answer = num1;
        else
          answer -= num1;
        // if user choose -, the program will subtract the number
        break;
        case quick:
        if (countOperand == 1)
          answer = num1;
        else
          answer -= num1;
        // if user choose -, the program will subtract the number
        break;
    }
   
      }
      public [int] selectionSort (int[]list){
        int i,j, temp = 0;
        minValue = list[i];
        minIndex = i;
        for (j = i + 1; j < list.length; j++){
          if (list[j] < minValue){
            minValue = list[j];
            minIndex = j;
          }
        }
      if (minValue < list[i]){
        temp = list[i];
        list[i] = list[minIndex];
        list[minIndex] = temp;
        
      }
        return list;
    }
  
  
     public int[] bubbleSort (int[]list){
       int i,j, temp = 0;
       for (i = 0; i < list.length; i++){
         for (j = 0; j < list.length - 1-i; j++){
           if (list[j] > list[j+1]){
             temp = list[j];
             list[j] = list[j+1];
             list[j+1] = temp;
           }
         }
       }
     }
   public int[] inserionSort (int[]list){
     int i, j, key, temp;
     for (i = 1; i < list.length; i++){
       key = list[i];
       j = i - 1;
       while (j >= 0 && key < list[j]){
         temp = list[j];
         list[j] = list[j+1];
         list[j+1] = temp;
         j--;
       }
     }
     
    }
    
  

      // @Test
      // void addition() {
      //     assertEquals(2, 1 + 1);
      // }
    
  

  // @Test
  // void addition() {
  //     assertEquals(2, 1 + 1);
  // }
